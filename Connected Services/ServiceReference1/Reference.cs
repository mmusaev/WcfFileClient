//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfFileClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileOperationFault", Namespace="http://schemas.datacontract.org/2004/07/WcfFileService.Contracts")]
    [System.SerializableAttribute()]
    public partial class FileOperationFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operation {
            get {
                return this.OperationField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationField, value) != true)) {
                    this.OperationField = value;
                    this.RaisePropertyChanged("Operation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason {
            get {
                return this.ReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonField, value) != true)) {
                    this.ReasonField = value;
                    this.RaisePropertyChanged("Reason");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IFileService")]
    public interface IFileService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/ListFiles", ReplyAction="http://tempuri.org/IFileService/ListFilesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfFileClient.ServiceReference1.FileOperationFault), Action="http://tempuri.org/IFileService/ListFilesFileOperationFaultFault", Name="FileOperationFault", Namespace="http://schemas.datacontract.org/2004/07/WcfFileService.Contracts")]
        string[] ListFiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/ListFiles", ReplyAction="http://tempuri.org/IFileService/ListFilesResponse")]
        System.Threading.Tasks.Task<string[]> ListFilesAsync();
        
        // CODEGEN: Generating message contract since the operation UploadFile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/UploadFile", ReplyAction="http://tempuri.org/IFileService/UploadFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfFileClient.ServiceReference1.FileOperationFault), Action="http://tempuri.org/IFileService/UploadFileFileOperationFaultFault", Name="FileOperationFault", Namespace="http://schemas.datacontract.org/2004/07/WcfFileService.Contracts")]
        WcfFileClient.ServiceReference1.UploadFileResponse UploadFile(WcfFileClient.ServiceReference1.FileUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/UploadFile", ReplyAction="http://tempuri.org/IFileService/UploadFileResponse")]
        System.Threading.Tasks.Task<WcfFileClient.ServiceReference1.UploadFileResponse> UploadFileAsync(WcfFileClient.ServiceReference1.FileUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/DownloadFile", ReplyAction="http://tempuri.org/IFileService/DownloadFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfFileClient.ServiceReference1.FileOperationFault), Action="http://tempuri.org/IFileService/DownloadFileFileOperationFaultFault", Name="FileOperationFault", Namespace="http://schemas.datacontract.org/2004/07/WcfFileService.Contracts")]
        System.IO.Stream DownloadFile(string fileDownload);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/DownloadFile", ReplyAction="http://tempuri.org/IFileService/DownloadFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(string fileDownload);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileUploadMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileUploadMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileData;
        
        public FileUploadMessage() {
        }
        
        public FileUploadMessage(string FileName, System.IO.Stream FileData) {
            this.FileName = FileName;
            this.FileData = FileData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadFileResponse {
        
        public UploadFileResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileServiceChannel : WcfFileClient.ServiceReference1.IFileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileServiceClient : System.ServiceModel.ClientBase<WcfFileClient.ServiceReference1.IFileService>, WcfFileClient.ServiceReference1.IFileService {
        
        public FileServiceClient() {
        }
        
        public FileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] ListFiles() {
            return base.Channel.ListFiles();
        }
        
        public System.Threading.Tasks.Task<string[]> ListFilesAsync() {
            return base.Channel.ListFilesAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WcfFileClient.ServiceReference1.UploadFileResponse WcfFileClient.ServiceReference1.IFileService.UploadFile(WcfFileClient.ServiceReference1.FileUploadMessage request) {
            return base.Channel.UploadFile(request);
        }
        
        public void UploadFile(string FileName, System.IO.Stream FileData) {
            WcfFileClient.ServiceReference1.FileUploadMessage inValue = new WcfFileClient.ServiceReference1.FileUploadMessage();
            inValue.FileName = FileName;
            inValue.FileData = FileData;
            WcfFileClient.ServiceReference1.UploadFileResponse retVal = ((WcfFileClient.ServiceReference1.IFileService)(this)).UploadFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WcfFileClient.ServiceReference1.UploadFileResponse> WcfFileClient.ServiceReference1.IFileService.UploadFileAsync(WcfFileClient.ServiceReference1.FileUploadMessage request) {
            return base.Channel.UploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<WcfFileClient.ServiceReference1.UploadFileResponse> UploadFileAsync(string FileName, System.IO.Stream FileData) {
            WcfFileClient.ServiceReference1.FileUploadMessage inValue = new WcfFileClient.ServiceReference1.FileUploadMessage();
            inValue.FileName = FileName;
            inValue.FileData = FileData;
            return ((WcfFileClient.ServiceReference1.IFileService)(this)).UploadFileAsync(inValue);
        }
        
        public System.IO.Stream DownloadFile(string fileDownload) {
            return base.Channel.DownloadFile(fileDownload);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(string fileDownload) {
            return base.Channel.DownloadFileAsync(fileDownload);
        }
    }
}
